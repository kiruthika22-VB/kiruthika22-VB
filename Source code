import pandas as pd
import numpy as np
import nltk
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Download NLTK stopwords
nltk.download('stopwords')
from nltk.corpus import stopwords

# Load Real and Fake News
# Use on_bad_lines instead of error_bad_lines
real_df = pd.read_csv("True.csv", quoting=3, on_bad_lines='skip')  # Skip bad lines
fake_df = pd.read_csv("Fake.csv", quoting=3, on_bad_lines='skip')  # Skip bad lines

# Add labels: 1 for real, 0 for fake
real_df['label'] = 1
fake_df['label'] = 0

# Combine and shuffle
df = pd.concat([real_df, fake_df], axis=0).sample(frac=1).reset_index(drop=True)

# Use only text and label columns
df = df[['text', 'label']].dropna()

# Preprocessing function
def clean_text(text):
    text = text.lower()
    text = ''.join([c for c in text if c not in string.punctuation])
    tokens = text.split()
    tokens = [w for w in tokens if w not in stopwords.words('english')]
    return ' '.join(tokens)

# Apply preprocessing
df['text'] = df['text'].apply(clean_text)

# TF-IDF Vectorization
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['text']).toarray()
y = df['label'].values

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression Model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("\nðŸ“Š Classification Report:\n")
print(classification_report(y_test, y_pred))
print("âœ… Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Fake', 'Real'], yticklabels=['Fake', 'Real'])
plt.title("Fake News Detection - Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()
